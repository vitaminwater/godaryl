// Code generated by protoc-gen-go. DO NOT EDIT.
// source: farm.proto

/*
Package farm is a generated protocol buffer package.

It is generated from these files:
	farm.proto

It has these top-level messages:
	StartDarylRequest
	HasDarylRequest
	StatusResponse
*/
package farm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartDarylRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *StartDarylRequest) Reset()                    { *m = StartDarylRequest{} }
func (m *StartDarylRequest) String() string            { return proto.CompactTextString(m) }
func (*StartDarylRequest) ProtoMessage()               {}
func (*StartDarylRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartDarylRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type HasDarylRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *HasDarylRequest) Reset()                    { *m = HasDarylRequest{} }
func (m *HasDarylRequest) String() string            { return proto.CompactTextString(m) }
func (*HasDarylRequest) ProtoMessage()               {}
func (*HasDarylRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HasDarylRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type StatusResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*StartDarylRequest)(nil), "farm.StartDarylRequest")
	proto.RegisterType((*HasDarylRequest)(nil), "farm.HasDarylRequest")
	proto.RegisterType((*StatusResponse)(nil), "farm.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Farm service

type FarmClient interface {
	StartDaryl(ctx context.Context, in *StartDarylRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	HasDaryl(ctx context.Context, in *HasDarylRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type farmClient struct {
	cc *grpc.ClientConn
}

func NewFarmClient(cc *grpc.ClientConn) FarmClient {
	return &farmClient{cc}
}

func (c *farmClient) StartDaryl(ctx context.Context, in *StartDarylRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/farm.Farm/StartDaryl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmClient) HasDaryl(ctx context.Context, in *HasDarylRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/farm.Farm/HasDaryl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Farm service

type FarmServer interface {
	StartDaryl(context.Context, *StartDarylRequest) (*StatusResponse, error)
	HasDaryl(context.Context, *HasDarylRequest) (*StatusResponse, error)
}

func RegisterFarmServer(s *grpc.Server, srv FarmServer) {
	s.RegisterService(&_Farm_serviceDesc, srv)
}

func _Farm_StartDaryl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDarylRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServer).StartDaryl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.Farm/StartDaryl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServer).StartDaryl(ctx, req.(*StartDarylRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Farm_HasDaryl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasDarylRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServer).HasDaryl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/farm.Farm/HasDaryl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServer).HasDaryl(ctx, req.(*HasDarylRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Farm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "farm.Farm",
	HandlerType: (*FarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDaryl",
			Handler:    _Farm_StartDaryl_Handler,
		},
		{
			MethodName: "HasDaryl",
			Handler:    _Farm_HasDaryl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm.proto",
}

func init() { proto.RegisterFile("farm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4b, 0x2c, 0xca,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x8c, 0xb9, 0x04, 0x83, 0x4b,
	0x12, 0x8b, 0x4a, 0x5c, 0x12, 0x8b, 0x2a, 0x73, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0xe4, 0xb8, 0xb8, 0x32, 0x53, 0x52, 0xf3, 0x4a, 0x32, 0xd3, 0x32, 0x53, 0x8b, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x90, 0x44, 0x94, 0x0c, 0xb9, 0xf8, 0x3d, 0x12, 0x8b, 0x49, 0xd2, 0xa2,
	0xc0, 0xc5, 0x17, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x1c, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c,
	0x2a, 0xc4, 0xc7, 0xc5, 0x94, 0x9f, 0x0d, 0x56, 0xc9, 0x11, 0xc4, 0x94, 0x9f, 0x6d, 0x54, 0xc3,
	0xc5, 0xe2, 0x96, 0x58, 0x94, 0x2b, 0x64, 0xcd, 0xc5, 0x85, 0x70, 0x91, 0x90, 0xb8, 0x1e, 0xd8,
	0xc9, 0x18, 0x6e, 0x94, 0x12, 0x81, 0x4b, 0x20, 0x1b, 0x6a, 0xce, 0xc5, 0x01, 0x73, 0x99, 0x90,
	0x28, 0x44, 0x05, 0x9a, 0x4b, 0xb1, 0x6b, 0x4c, 0x62, 0x03, 0x07, 0x8a, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0x17, 0x26, 0x8b, 0x22, 0x01, 0x00, 0x00,
}
