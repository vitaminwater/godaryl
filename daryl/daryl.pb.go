// Code generated by protoc-gen-go. DO NOT EDIT.
// source: daryl.proto

/*
Package daryl is a generated protocol buffer package.

It is generated from these files:
	daryl.proto

It has these top-level messages:
	UserMessageRequest
	UserMessageResponse
	Habit
	AddHabitRequest
	AddHabitResponse
	StartWorkSessionRequest
	StartWorkSessionResponse
*/
package daryl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserMessageRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *UserMessageRequest) Reset()                    { *m = UserMessageRequest{} }
func (m *UserMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UserMessageRequest) ProtoMessage()               {}
func (*UserMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserMessageRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *UserMessageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type UserMessageResponse struct {
}

func (m *UserMessageResponse) Reset()                    { *m = UserMessageResponse{} }
func (m *UserMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*UserMessageResponse) ProtoMessage()               {}
func (*UserMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Habit struct {
	Title       string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	AvgDuration uint32 `protobuf:"varint,2,opt,name=avgDuration" json:"avgDuration,omitempty"`
	Deadline    string `protobuf:"bytes,3,opt,name=deadline" json:"deadline,omitempty"`
	During      uint32 `protobuf:"varint,4,opt,name=during" json:"during,omitempty"`
	Every       uint32 `protobuf:"varint,5,opt,name=every" json:"every,omitempty"`
	EveryUnit   string `protobuf:"bytes,6,opt,name=everyUnit" json:"everyUnit,omitempty"`
}

func (m *Habit) Reset()                    { *m = Habit{} }
func (m *Habit) String() string            { return proto.CompactTextString(m) }
func (*Habit) ProtoMessage()               {}
func (*Habit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Habit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Habit) GetAvgDuration() uint32 {
	if m != nil {
		return m.AvgDuration
	}
	return 0
}

func (m *Habit) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *Habit) GetDuring() uint32 {
	if m != nil {
		return m.During
	}
	return 0
}

func (m *Habit) GetEvery() uint32 {
	if m != nil {
		return m.Every
	}
	return 0
}

func (m *Habit) GetEveryUnit() string {
	if m != nil {
		return m.EveryUnit
	}
	return ""
}

type AddHabitRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Habit      *Habit `protobuf:"bytes,2,opt,name=habit" json:"habit,omitempty"`
}

func (m *AddHabitRequest) Reset()                    { *m = AddHabitRequest{} }
func (m *AddHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*AddHabitRequest) ProtoMessage()               {}
func (*AddHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddHabitRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AddHabitRequest) GetHabit() *Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

type AddHabitResponse struct {
}

func (m *AddHabitResponse) Reset()                    { *m = AddHabitResponse{} }
func (m *AddHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*AddHabitResponse) ProtoMessage()               {}
func (*AddHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StartWorkSessionRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *StartWorkSessionRequest) Reset()                    { *m = StartWorkSessionRequest{} }
func (m *StartWorkSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*StartWorkSessionRequest) ProtoMessage()               {}
func (*StartWorkSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StartWorkSessionRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type StartWorkSessionResponse struct {
}

func (m *StartWorkSessionResponse) Reset()                    { *m = StartWorkSessionResponse{} }
func (m *StartWorkSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*StartWorkSessionResponse) ProtoMessage()               {}
func (*StartWorkSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*UserMessageRequest)(nil), "daryl.UserMessageRequest")
	proto.RegisterType((*UserMessageResponse)(nil), "daryl.UserMessageResponse")
	proto.RegisterType((*Habit)(nil), "daryl.Habit")
	proto.RegisterType((*AddHabitRequest)(nil), "daryl.AddHabitRequest")
	proto.RegisterType((*AddHabitResponse)(nil), "daryl.AddHabitResponse")
	proto.RegisterType((*StartWorkSessionRequest)(nil), "daryl.StartWorkSessionRequest")
	proto.RegisterType((*StartWorkSessionResponse)(nil), "daryl.StartWorkSessionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Daryl service

type DarylClient interface {
	UserMessage(ctx context.Context, in *UserMessageRequest, opts ...grpc.CallOption) (*UserMessageResponse, error)
	AddHabit(ctx context.Context, in *AddHabitRequest, opts ...grpc.CallOption) (*AddHabitResponse, error)
	StartWorkSession(ctx context.Context, in *StartWorkSessionRequest, opts ...grpc.CallOption) (*StartWorkSessionResponse, error)
}

type darylClient struct {
	cc *grpc.ClientConn
}

func NewDarylClient(cc *grpc.ClientConn) DarylClient {
	return &darylClient{cc}
}

func (c *darylClient) UserMessage(ctx context.Context, in *UserMessageRequest, opts ...grpc.CallOption) (*UserMessageResponse, error) {
	out := new(UserMessageResponse)
	err := grpc.Invoke(ctx, "/daryl.Daryl/UserMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darylClient) AddHabit(ctx context.Context, in *AddHabitRequest, opts ...grpc.CallOption) (*AddHabitResponse, error) {
	out := new(AddHabitResponse)
	err := grpc.Invoke(ctx, "/daryl.Daryl/AddHabit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darylClient) StartWorkSession(ctx context.Context, in *StartWorkSessionRequest, opts ...grpc.CallOption) (*StartWorkSessionResponse, error) {
	out := new(StartWorkSessionResponse)
	err := grpc.Invoke(ctx, "/daryl.Daryl/StartWorkSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Daryl service

type DarylServer interface {
	UserMessage(context.Context, *UserMessageRequest) (*UserMessageResponse, error)
	AddHabit(context.Context, *AddHabitRequest) (*AddHabitResponse, error)
	StartWorkSession(context.Context, *StartWorkSessionRequest) (*StartWorkSessionResponse, error)
}

func RegisterDarylServer(s *grpc.Server, srv DarylServer) {
	s.RegisterService(&_Daryl_serviceDesc, srv)
}

func _Daryl_UserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarylServer).UserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daryl.Daryl/UserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarylServer).UserMessage(ctx, req.(*UserMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daryl_AddHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarylServer).AddHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daryl.Daryl/AddHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarylServer).AddHabit(ctx, req.(*AddHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daryl_StartWorkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarylServer).StartWorkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daryl.Daryl/StartWorkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarylServer).StartWorkSession(ctx, req.(*StartWorkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Daryl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daryl.Daryl",
	HandlerType: (*DarylServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserMessage",
			Handler:    _Daryl_UserMessage_Handler,
		},
		{
			MethodName: "AddHabit",
			Handler:    _Daryl_AddHabit_Handler,
		},
		{
			MethodName: "StartWorkSession",
			Handler:    _Daryl_StartWorkSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daryl.proto",
}

func init() { proto.RegisterFile("daryl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4e, 0x02, 0x31,
	0x10, 0x86, 0xb3, 0xca, 0x12, 0x98, 0xd5, 0x48, 0x46, 0x85, 0xba, 0x31, 0x48, 0x7a, 0xf2, 0xc4,
	0x01, 0x4f, 0xc6, 0x93, 0x09, 0x07, 0x2e, 0x5e, 0x20, 0xc4, 0x73, 0x49, 0x47, 0x6c, 0x24, 0x5d,
	0x6c, 0x0b, 0x91, 0x27, 0xf2, 0xb1, 0x7c, 0x15, 0x43, 0x5b, 0x05, 0x59, 0x49, 0xb8, 0xf5, 0xff,
	0x67, 0xe6, 0xeb, 0xbf, 0xd3, 0x85, 0x4c, 0x0a, 0xb3, 0x9a, 0x75, 0xe7, 0xa6, 0x70, 0x05, 0xa6,
	0x5e, 0xf0, 0x01, 0xe0, 0xd8, 0x92, 0x79, 0x22, 0x6b, 0xc5, 0x94, 0x86, 0xf4, 0xbe, 0x20, 0xeb,
	0xb0, 0x0d, 0xa0, 0x24, 0x69, 0xa7, 0x5e, 0x14, 0x19, 0x96, 0x74, 0x92, 0xdb, 0xfa, 0x70, 0xcb,
	0x41, 0x84, 0x8a, 0xa3, 0x0f, 0xc7, 0x8e, 0x7c, 0xc5, 0x9f, 0xf9, 0x25, 0x9c, 0xff, 0x21, 0xd9,
	0x79, 0xa1, 0x2d, 0xf1, 0xcf, 0x04, 0xd2, 0x81, 0x98, 0x28, 0x87, 0x17, 0x90, 0x3a, 0xe5, 0x66,
	0x14, 0x79, 0x41, 0x60, 0x07, 0x32, 0xb1, 0x9c, 0xf6, 0x17, 0x46, 0x38, 0x55, 0x68, 0x4f, 0x3c,
	0x1d, 0x6e, 0x5b, 0x98, 0x43, 0x4d, 0x92, 0x90, 0x33, 0xa5, 0x89, 0x1d, 0xfb, 0xd1, 0x5f, 0x8d,
	0x4d, 0xa8, 0xca, 0x85, 0x51, 0x7a, 0xca, 0x2a, 0x7e, 0x30, 0xaa, 0xf5, 0x5d, 0xb4, 0x24, 0xb3,
	0x62, 0xa9, 0xb7, 0x83, 0xc0, 0x6b, 0xa8, 0xfb, 0xc3, 0x58, 0x2b, 0xc7, 0xaa, 0x1e, 0xb5, 0x31,
	0xf8, 0x18, 0xce, 0x1e, 0xa5, 0xf4, 0x59, 0x0f, 0xdd, 0x03, 0x87, 0xf4, 0x75, 0xdd, 0xef, 0x63,
	0x67, 0xbd, 0x93, 0x6e, 0xd8, 0x70, 0x60, 0x84, 0x12, 0x47, 0x68, 0x6c, 0xb0, 0x71, 0x29, 0xf7,
	0xd0, 0x1a, 0x39, 0x61, 0xdc, 0x73, 0x61, 0xde, 0x46, 0x64, 0xad, 0x2a, 0xf4, 0x81, 0x57, 0xf2,
	0x1c, 0x58, 0x79, 0x34, 0x60, 0x7b, 0x5f, 0x09, 0xa4, 0xfd, 0x75, 0x02, 0xec, 0x43, 0xb6, 0xf5,
	0x18, 0x78, 0x15, 0x83, 0x95, 0x9f, 0x3a, 0xcf, 0xff, 0x2b, 0x05, 0x1e, 0x3e, 0x40, 0xed, 0x27,
	0x3a, 0x36, 0x63, 0xdf, 0xce, 0x8a, 0xf2, 0x56, 0xc9, 0x8f, 0xc3, 0x23, 0x68, 0xec, 0x06, 0xc5,
	0x76, 0x6c, 0xde, 0xf3, 0xf1, 0xf9, 0xcd, 0xde, 0x7a, 0x80, 0x4e, 0xaa, 0xfe, 0xe7, 0xbd, 0xfb,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x00, 0xbb, 0x8c, 0x1f, 0xcb, 0x02, 0x00, 0x00,
}
